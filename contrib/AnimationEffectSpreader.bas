Attribute VB_Name = "AnimationEffectSpreader"
Option Explicit

Sub AddElements()
Dim debugMode As Boolean: debugMode = False

Dim originalSlideCount As Integer
Dim originalSlideNumber As Integer
Dim originalSlide As Slide

originalSlideCount = ActivePresentation.Slides.Count
For originalSlideNumber = 1 To originalSlideCount
    
    Dim countOfAnimations As Integer
    Dim animationNumber As Integer
    Dim newSlide As Slide
    Dim itemsToDelete As New Collection
    
    Set originalSlide = ActivePresentation.Slides(originalSlideNumber)
    originalSlide.SlideShowTransition.Hidden = msoTrue
    
    countOfAnimations = AnimationElements(originalSlide)
    For animationNumber = 1 To countOfAnimations
        
        Set newSlide = originalSlide.Duplicate(1)
        If debugMode Then newSlide.Select
        
        newSlide.Name = "AutoGenerated: " & newSlide.SlideID
        newSlide.SlideShowTransition.Hidden = msoFalse
        newSlide.MoveTo ActivePresentation.Slides.Count
        
        Call FindItemsToDelete(itemsToDelete, newSlide, ByVal animationNumber, debugMode)
        Call RemoveAnimations(newSlide)
        Call DeleteItems(newSlide, itemsToDelete)
    
    Next animationNumber

Next originalSlideNumber

End Sub

'How many animation effects are there?
'1 for a slide with no additional effects
Function AnimationElements(oSlide As Slide) As Integer
AnimationElements = 1
Dim oEffect As Effect
For Each oEffect In oSlide.TimeLine.MainSequence
    If oEffect.Timing.TriggerType = msoAnimTriggerOnPageClick Then
        AnimationElements = AnimationElements + 1
    End If
Next
End Function

Function GetCountOfParagraphs(oShape As Shape) As Integer
    
    Dim shapeText As String
    Dim paraCount As Integer
    Dim nextCr As Integer
    
    paraCount = 0
    If oShape.HasTextFrame Then
        If oShape.TextFrame.HasText Then
            paraCount = oShape.TextFrame.TextRange.Paragraphs.Count
        End If
    End If
    
    GetCountOfParagraphs = paraCount
End Function

'Is the shape/paragraph on this slide visible at point this time step (1..animationNumber)
Function determineSPVisibility( _
    oSlide As Slide, _
    oShape As Shape, _
    paragraphNumber As Long, _
    ByVal animationNumber As Integer) _
    As ShapeParagraphVisibility

Dim result As New ShapeParagraphVisibility
Dim oEffect As Effect
Dim effectParagraph

Set result.Shape = oShape
result.Paragraph = paragraphNumber
result.IsVisible = True ' default for shape not associated with animation effect

'first search for a start state
For Each oEffect In oSlide.TimeLine.MainSequence
    If AnimatesThisItem(oEffect, oShape, paragraphNumber) Then
        result.IsVisible = Not (oEffect.Exit = msoFalse)
    End If
Next oEffect

'now run forward animating it
Dim otherEffectNumber As Integer: otherEffectNumber = 1
For Each oEffect In oSlide.TimeLine.MainSequence
    If oEffect.Timing.TriggerType = msoAnimTriggerOnPageClick Then
        otherEffectNumber = otherEffectNumber + 1
    End If
    
    If otherEffectNumber > animationNumber Then
        Exit For
    End If
    
    If AnimatesThisItem(oEffect, oShape, paragraphNumber) Then
        result.IsVisible = (oEffect.Exit = msoFalse)
    End If
Next oEffect

Set determineSPVisibility = result

End Function

Function AnimatesThisItem(oEffect As Effect, oShape As Shape, paragraphNumber As Long) As Boolean
Dim effectParagraph As Integer

AnimatesThisItem = False

If oEffect.Shape Is oShape Then
    
    ' Attempting to access Effect.Paragraph when effect applies to shape as a
    ' whole throws an error. There must be a better way of coding this!
    effectParagraph = 0
    On Error Resume Next
    effectParagraph = oEffect.Paragraph
    On Error GoTo 0
    
    If effectParagraph = paragraphNumber Then
        AnimatesThisItem = True
    End If
End If

End Function

Sub FindItemsToDelete( _
        itemsToDelete As Collection, _
        oSlide As Slide, _
        ByVal animationNumber As Integer, _
        debugMode As Boolean)

    Dim shapeNumber As Integer
    Dim oShape As Shape
    Dim paragraphNumber As Long
    Dim countOfParagraphs As Integer
    Dim spVisibility As ShapeParagraphVisibility
        
    For shapeNumber = oSlide.Shapes.Count To 1 Step -1
        Set oShape = oSlide.Shapes(shapeNumber)
        If debugMode Then
            ActiveWindow.View.GotoSlide oSlide.SlideIndex
            oShape.Select
        End If

        countOfParagraphs = GetCountOfParagraphs(oShape)
        If countOfParagraphs < 2 Then ' Any effects must apply to shape as a whole
            Set spVisibility = determineSPVisibility(oSlide, oShape, 0, ByVal animationNumber)
            If debugMode Then Call makeNoteInLog(animationNumber, shapeNumber, spVisibility)

            If Not spVisibility.IsVisible Then
                itemsToDelete.Add spVisibility
            End If
        Else
            For paragraphNumber = 1 To countOfParagraphs
                Set spVisibility = determineSPVisibility(oSlide, oShape, paragraphNumber, ByVal animationNumber)
                If Not spVisibility.IsVisible Then
                    itemsToDelete.Add spVisibility
                End If
            Next
        End If
    Next shapeNumber

End Sub

Sub RemoveAnimations(oSlide As Slide)
    ' Get rid of all animation effects before deletion
    While oSlide.TimeLine.MainSequence.Count > 0
        oSlide.TimeLine.MainSequence.Item(1).Delete
    Wend
End Sub

Sub DeleteItems(oSlide As Slide, itemsToDelete As Collection)
    Dim itemNumber As Integer
    Dim spVisibility As ShapeParagraphVisibility
    Dim oShape As Shape
    Dim oTextRange As TextRange
    Dim oldTop As Single
        
    For itemNumber = itemsToDelete.Count To 1 Step -1
        Set spVisibility = itemsToDelete(itemNumber)
        Set oShape = spVisibility.Shape
    
        If spVisibility.Paragraph = 0 Then
            oShape.Delete
        Else
            Set oTextRange = oShape.TextFrame.TextRange
            oldTop = oShape.Top
            oTextRange.Paragraphs(spVisibility.Paragraph).Delete
            oShape.Top = oldTop
        End If
        
        itemsToDelete.Remove itemNumber
    Next itemNumber

End Sub

Sub RestorePresentation()
Dim slideNumber As Integer, slideCount As Integer
Dim oSlide As Slide

slideCount = ActivePresentation.Slides.Count

For slideNumber = slideCount To 1 Step -1
    Set oSlide = ActivePresentation.Slides(slideNumber)
    If oSlide.SlideShowTransition.Hidden = msoTrue Then
        oSlide.SlideShowTransition.Hidden = msoFalse
    ElseIf Left$(oSlide.Name, 13) = "AutoGenerated" Then
        oSlide.Delete
    End If
Next

End Sub

Sub makeNoteInLog(slideNumber As Integer, shapeNumber As Integer, spVisibility As ShapeParagraphVisibility)
    Dim DebugId As String
    Dim endPara As Integer
    
    On Error Resume Next
    DebugId = spVisibility.Shape.Name
    If Err > 0 Then DebugId = "#" & shapeNumber
    On Error GoTo 0
    
    If spVisibility.Paragraph > 0 Then
        DebugId = DebugId & "-" & spVisibility.Shape.TextFrame.TextRange.Text
        endPara = InStr(DebugId, vbCr) - 1
        If endPara < 0 Then endPara = Len(DebugId)
        DebugId = Left(DebugId, endPara)
    End If
    
    Debug.Print slideNumber & "/" & shapeNumber & "/" & DebugId & "/P" & spVisibility.Paragraph & ":" & spVisibility.IsVisible

    If shapeNumber = 1 Then
        Debug.Print vbNewLine
    End If
End Sub
